/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9 */

#ifndef PB_PENUMBRA_CORE_COMPONENT_FEE_V1_PENUMBRA_CORE_COMPONENT_FEE_V1_FEE_PB_H_INCLUDED
#define PB_PENUMBRA_CORE_COMPONENT_FEE_V1_PENUMBRA_CORE_COMPONENT_FEE_V1_FEE_PB_H_INCLUDED
#include <pb.h>

#include "penumbra/core/asset/v1/asset.pb.h"
#include "penumbra/core/num/v1/num.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* Specifies fees paid by a transaction. */
typedef struct _penumbra_core_component_fee_v1_Fee {
    /* The amount of the token used to pay fees. */
    bool has_amount;
    penumbra_core_num_v1_Amount amount;
    /* If present, the asset ID of the token used to pay fees.
 If absent, specifies the staking token implicitly. */
    bool has_asset_id;
    penumbra_core_asset_v1_AssetId asset_id;
} penumbra_core_component_fee_v1_Fee;

typedef struct _penumbra_core_component_fee_v1_GasPrices {
    /* The price per unit block space in terms of the staking token, with an implicit 1,000 denominator. */
    uint64_t block_space_price;
    /* The price per unit compact block space in terms of the staking token, with an implicit 1,000 denominator. */
    uint64_t compact_block_space_price;
    /* The price per unit verification cost in terms of the staking token, with an implicit 1,000 denominator. */
    uint64_t verification_price;
    /* The price per unit execution cost in terms of the staking token, with an implicit 1,000 denominator. */
    uint64_t execution_price;
    /* The asset ID of the fee token these prices are for.

 If absent, specifies the staking token implicitly. */
    bool has_asset_id;
    penumbra_core_asset_v1_AssetId asset_id;
} penumbra_core_component_fee_v1_GasPrices;

/* Fee component configuration data. */
typedef struct _penumbra_core_component_fee_v1_FeeParameters {
    /* Fixed gas prices in the native token used to compute transactions' base
 fees.

 In the future, this should be removed and replaced with parameters for
 dynamic gas pricing. */
    bool has_fixed_gas_prices;
    penumbra_core_component_fee_v1_GasPrices fixed_gas_prices;
    /* Fixed gas prices in other tokens used to compute transactions' base fees.

 In the future, this should be removed and replaced with fixed multiples of
 the native token's price (so that there is one set of dynamically
 determined gas prices in the native token, and derived gas prices in other
 alternative tokens).

 If this is empty, no other tokens are accepted for gas. */
    pb_callback_t fixed_alt_gas_prices;
} penumbra_core_component_fee_v1_FeeParameters;

#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define penumbra_core_component_fee_v1_Fee_init_default \
    { false, penumbra_core_num_v1_Amount_init_default, false, penumbra_core_asset_v1_AssetId_init_default }
#define penumbra_core_component_fee_v1_GasPrices_init_default \
    { 0, 0, 0, 0, false, penumbra_core_asset_v1_AssetId_init_default }
#define penumbra_core_component_fee_v1_FeeParameters_init_default                      \
    {                                                                                  \
        false, penumbra_core_component_fee_v1_GasPrices_init_default, { {NULL}, NULL } \
    }
#define penumbra_core_component_fee_v1_Fee_init_zero \
    { false, penumbra_core_num_v1_Amount_init_zero, false, penumbra_core_asset_v1_AssetId_init_zero }
#define penumbra_core_component_fee_v1_GasPrices_init_zero \
    { 0, 0, 0, 0, false, penumbra_core_asset_v1_AssetId_init_zero }
#define penumbra_core_component_fee_v1_FeeParameters_init_zero                      \
    {                                                                               \
        false, penumbra_core_component_fee_v1_GasPrices_init_zero, { {NULL}, NULL } \
    }

/* Field tags (for use in manual encoding/decoding) */
#define penumbra_core_component_fee_v1_Fee_amount_tag 1
#define penumbra_core_component_fee_v1_Fee_asset_id_tag 2
#define penumbra_core_component_fee_v1_GasPrices_block_space_price_tag 1
#define penumbra_core_component_fee_v1_GasPrices_compact_block_space_price_tag 2
#define penumbra_core_component_fee_v1_GasPrices_verification_price_tag 3
#define penumbra_core_component_fee_v1_GasPrices_execution_price_tag 4
#define penumbra_core_component_fee_v1_GasPrices_asset_id_tag 15
#define penumbra_core_component_fee_v1_FeeParameters_fixed_gas_prices_tag 1
#define penumbra_core_component_fee_v1_FeeParameters_fixed_alt_gas_prices_tag 2

/* Struct field encoding specification for nanopb */
#define penumbra_core_component_fee_v1_Fee_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, amount, 1)             \
    X(a, STATIC, OPTIONAL, MESSAGE, asset_id, 2)
#define penumbra_core_component_fee_v1_Fee_CALLBACK NULL
#define penumbra_core_component_fee_v1_Fee_DEFAULT NULL
#define penumbra_core_component_fee_v1_Fee_amount_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_fee_v1_Fee_asset_id_MSGTYPE penumbra_core_asset_v1_AssetId

#define penumbra_core_component_fee_v1_GasPrices_FIELDLIST(X, a) \
    X(a, STATIC, SINGULAR, UINT64, block_space_price, 1)         \
    X(a, STATIC, SINGULAR, UINT64, compact_block_space_price, 2) \
    X(a, STATIC, SINGULAR, UINT64, verification_price, 3)        \
    X(a, STATIC, SINGULAR, UINT64, execution_price, 4)           \
    X(a, STATIC, OPTIONAL, MESSAGE, asset_id, 15)
#define penumbra_core_component_fee_v1_GasPrices_CALLBACK NULL
#define penumbra_core_component_fee_v1_GasPrices_DEFAULT NULL
#define penumbra_core_component_fee_v1_GasPrices_asset_id_MSGTYPE penumbra_core_asset_v1_AssetId

#define penumbra_core_component_fee_v1_FeeParameters_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, fixed_gas_prices, 1)             \
    X(a, CALLBACK, REPEATED, MESSAGE, fixed_alt_gas_prices, 2)
#define penumbra_core_component_fee_v1_FeeParameters_CALLBACK pb_default_field_callback
#define penumbra_core_component_fee_v1_FeeParameters_DEFAULT NULL
#define penumbra_core_component_fee_v1_FeeParameters_fixed_gas_prices_MSGTYPE penumbra_core_component_fee_v1_GasPrices
#define penumbra_core_component_fee_v1_FeeParameters_fixed_alt_gas_prices_MSGTYPE penumbra_core_component_fee_v1_GasPrices

extern const pb_msgdesc_t penumbra_core_component_fee_v1_Fee_msg;
extern const pb_msgdesc_t penumbra_core_component_fee_v1_GasPrices_msg;
extern const pb_msgdesc_t penumbra_core_component_fee_v1_FeeParameters_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define penumbra_core_component_fee_v1_Fee_fields &penumbra_core_component_fee_v1_Fee_msg
#define penumbra_core_component_fee_v1_GasPrices_fields &penumbra_core_component_fee_v1_GasPrices_msg
#define penumbra_core_component_fee_v1_FeeParameters_fields &penumbra_core_component_fee_v1_FeeParameters_msg

/* Maximum encoded size of messages (where known) */
/* penumbra_core_component_fee_v1_FeeParameters_size depends on runtime parameters */
#if defined(penumbra_core_asset_v1_AssetId_size)
#define PENUMBRA_CORE_COMPONENT_FEE_V1_PENUMBRA_CORE_COMPONENT_FEE_V1_FEE_PB_H_MAX_SIZE \
    penumbra_core_component_fee_v1_GasPrices_size
#define penumbra_core_component_fee_v1_Fee_size (30 + penumbra_core_asset_v1_AssetId_size)
#define penumbra_core_component_fee_v1_GasPrices_size (50 + penumbra_core_asset_v1_AssetId_size)
#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
