/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9 */

#ifndef PB_PENUMBRA_CORE_COMPONENT_STAKE_V1_PENUMBRA_CORE_COMPONENT_STAKE_V1_STAKE_PB_H_INCLUDED
#define PB_PENUMBRA_CORE_COMPONENT_STAKE_V1_PENUMBRA_CORE_COMPONENT_STAKE_V1_STAKE_PB_H_INCLUDED
#include <pb.h>

#include "penumbra/core/asset/v1/asset.pb.h"
#include "penumbra/core/component/sct/v1/sct.pb.h"
#include "penumbra/core/keys/v1/keys.pb.h"
#include "penumbra/core/num/v1/num.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* Describes a validator's configuration data. */
typedef struct _penumbra_core_component_stake_v1_Validator {
    /* The validator's identity verification key. */
    bool has_identity_key;
    penumbra_core_keys_v1_IdentityKey identity_key;
    /* The validator's consensus pubkey for use in Tendermint (Ed25519). */
    pb_callback_t consensus_key;
    /* The validator's (human-readable) name. */
    pb_callback_t name;
    /* The validator's website. */
    pb_callback_t website;
    /* The validator's description. */
    pb_callback_t description;
    /* A list of funding streams describing the validator's commission. */
    pb_callback_t funding_streams;
    /* The sequence number determines which validator data takes priority, and
 prevents replay attacks.  The chain only accepts new validator definitions
 with increasing sequence numbers. */
    uint32_t sequence_number;
    /* Whether the validator is enabled or not.

 Disabled validators cannot be delegated to, and immediately begin unbonding. */
    bool enabled;
    /* The validator's governance key. */
    bool has_governance_key;
    penumbra_core_keys_v1_GovernanceKey governance_key;
} penumbra_core_component_stake_v1_Validator;

typedef struct _penumbra_core_component_stake_v1_FundingStream_ToAddress {
    /* The destination address for the funding stream. */
    pb_callback_t address;
    /* The portion of the staking reward for the entire delegation pool
 allocated to this funding stream, specified in basis points. */
    uint32_t rate_bps;
} penumbra_core_component_stake_v1_FundingStream_ToAddress;

typedef struct _penumbra_core_component_stake_v1_FundingStream_ToCommunityPool {
    /* The portion of the staking reward for the entire delegation pool
 allocated to this funding stream, specified in basis points. */
    uint32_t rate_bps;
} penumbra_core_component_stake_v1_FundingStream_ToCommunityPool;

/* A portion of a validator's commission. */
typedef struct _penumbra_core_component_stake_v1_FundingStream {
    pb_size_t which_recipient;
    union {
        penumbra_core_component_stake_v1_FundingStream_ToAddress to_address;
        penumbra_core_component_stake_v1_FundingStream_ToCommunityPool to_community_pool;
    } recipient;
} penumbra_core_component_stake_v1_FundingStream;

/* A transaction action (re)defining a validator. */
typedef struct _penumbra_core_component_stake_v1_ValidatorDefinition {
    /* The configuration data for the validator. */
    bool has_validator;
    penumbra_core_component_stake_v1_Validator validator;
    /* A signature by the validator's identity key over the validator data. */
    pb_callback_t auth_sig;
} penumbra_core_component_stake_v1_ValidatorDefinition;

/* A transaction action adding stake to a validator's delegation pool. */
typedef struct _penumbra_core_component_stake_v1_Delegate {
    /* The identity key of the validator to delegate to. */
    bool has_validator_identity;
    penumbra_core_keys_v1_IdentityKey validator_identity;
    /* The index of the epoch in which this delegation was performed.
 The delegation takes effect in the next epoch. */
    uint64_t epoch_index;
    /* The delegation amount, in units of unbonded stake.
 TODO: use flow aggregation to hide this, replacing it with bytes amount_ciphertext; */
    bool has_unbonded_amount;
    penumbra_core_num_v1_Amount unbonded_amount;
    /* The amount of delegation tokens produced by this action.

 This is implied by the validator's exchange rate in the specified epoch
 (and should be checked in transaction validation!), but including it allows
 stateless verification that the transaction is internally consistent. */
    bool has_delegation_amount;
    penumbra_core_num_v1_Amount delegation_amount;
} penumbra_core_component_stake_v1_Delegate;

/* A transaction action withdrawing stake from a validator's delegation pool. */
typedef struct _penumbra_core_component_stake_v1_Undelegate {
    /* The identity key of the validator to undelegate from. */
    bool has_validator_identity;
    penumbra_core_keys_v1_IdentityKey validator_identity;
    /* The index of the epoch in which this undelegation was performed. */
    uint64_t start_epoch_index;
    /* The amount to undelegate, in units of unbonding tokens. */
    bool has_unbonded_amount;
    penumbra_core_num_v1_Amount unbonded_amount;
    /* The amount of delegation tokens consumed by this action.

 This is implied by the validator's exchange rate in the specified epoch
 (and should be checked in transaction validation!), but including it allows
 stateless verification that the transaction is internally consistent. */
    bool has_delegation_amount;
    penumbra_core_num_v1_Amount delegation_amount;
    /* The epoch in which this delegation was performed. */
    bool has_from_epoch;
    penumbra_core_component_sct_v1_Epoch from_epoch;
} penumbra_core_component_stake_v1_Undelegate;

/* Tracks slashing penalties applied to a validator in some epoch. */
typedef struct _penumbra_core_component_stake_v1_Penalty {
    pb_callback_t inner;
} penumbra_core_component_stake_v1_Penalty;

typedef struct _penumbra_core_component_stake_v1_UndelegateClaimBody {
    /* The identity key of the validator to finish undelegating from. */
    bool has_validator_identity;
    penumbra_core_keys_v1_IdentityKey validator_identity;
    /* The epoch in which unbonding began, used to verify the penalty. */
    uint64_t start_epoch_index;
    /* The penalty applied to undelegation, in bps^2 (10e-8).
 In the happy path (no slashing), this is 0. */
    bool has_penalty;
    penumbra_core_component_stake_v1_Penalty penalty;
    /* The action's contribution to the transaction's value balance. */
    bool has_balance_commitment;
    penumbra_core_asset_v1_BalanceCommitment balance_commitment;
    /* / The starting height of the epoch during which unbonding began. */
    uint64_t unbonding_start_height;
} penumbra_core_component_stake_v1_UndelegateClaimBody;

/* A transaction action finishing an undelegation, converting (slashable)
 "unbonding tokens" to (unslashable) staking tokens. */
typedef struct _penumbra_core_component_stake_v1_UndelegateClaim {
    bool has_body;
    penumbra_core_component_stake_v1_UndelegateClaimBody body;
    pb_callback_t proof;
} penumbra_core_component_stake_v1_UndelegateClaim;

typedef struct _penumbra_core_component_stake_v1_UndelegateClaimPlan {
    /* The identity key of the validator to finish undelegating from. */
    bool has_validator_identity;
    penumbra_core_keys_v1_IdentityKey validator_identity;
    /* The epoch in which unbonding began, used to verify the penalty. */
    uint64_t start_epoch_index;
    /* The penalty applied to undelegation, in bps^2 (10e-8).
 In the happy path (no slashing), this is 0. */
    bool has_penalty;
    penumbra_core_component_stake_v1_Penalty penalty;
    /* The amount of unbonding tokens to claim.
 This is a bare number because its denom is determined by the preceding data. */
    bool has_unbonding_amount;
    penumbra_core_num_v1_Amount unbonding_amount;
    /* The blinding factor to use for the balance commitment. */
    pb_callback_t balance_blinding;
    /* The first blinding factor to use for the ZK undelegate claim proof. */
    pb_callback_t proof_blinding_r;
    /* The second blinding factor to use for the ZK undelegate claim proof. */
    pb_callback_t proof_blinding_s;
    /* The height during which unbonding began. */
    uint64_t unbonding_start_height;
} penumbra_core_component_stake_v1_UndelegateClaimPlan;

/* Staking configuration data. */
typedef struct _penumbra_core_component_stake_v1_StakeParameters {
    /* The number of epochs an unbonding note for before being released. */
    uint64_t unbonding_epochs;
    /* The maximum number of validators in the consensus set. */
    uint64_t active_validator_limit;
    /* The base reward rate, expressed in basis points of basis points */
    uint64_t base_reward_rate;
    /* The penalty for slashing due to misbehavior. */
    uint64_t slashing_penalty_misbehavior;
    /* The penalty for slashing due to downtime. */
    uint64_t slashing_penalty_downtime;
    /* The number of blocks in the window to check for downtime. */
    uint64_t signed_blocks_window_len;
    /* The maximum number of blocks in the window each validator can miss signing without slashing. */
    uint64_t missed_blocks_maximum;
    /* The minimum amount of stake required for a validator to be indexed by the protocol. */
    bool has_min_validator_stake;
    penumbra_core_num_v1_Amount min_validator_stake;
    /* The number of blocks that must elapse before an unbonding note can be claimed. */
    uint64_t unbonding_delay;
} penumbra_core_component_stake_v1_StakeParameters;

#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define penumbra_core_component_stake_v1_Validator_init_default                                                \
    {                                                                                                          \
        false, penumbra_core_keys_v1_IdentityKey_init_default, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, \
            {{NULL}, NULL}, {{NULL}, NULL}, 0, 0, false, penumbra_core_keys_v1_GovernanceKey_init_default      \
    }
#define penumbra_core_component_stake_v1_FundingStream_init_default                  \
    {                                                                                \
        0, { penumbra_core_component_stake_v1_FundingStream_ToAddress_init_default } \
    }
#define penumbra_core_component_stake_v1_FundingStream_ToAddress_init_default \
    { {{NULL}, NULL}, 0 }
#define penumbra_core_component_stake_v1_FundingStream_ToCommunityPool_init_default \
    { 0 }
#define penumbra_core_component_stake_v1_ValidatorDefinition_init_default                \
    {                                                                                    \
        false, penumbra_core_component_stake_v1_Validator_init_default, { {NULL}, NULL } \
    }
#define penumbra_core_component_stake_v1_Delegate_init_default                                                            \
    {                                                                                                                     \
        false, penumbra_core_keys_v1_IdentityKey_init_default, 0, false, penumbra_core_num_v1_Amount_init_default, false, \
            penumbra_core_num_v1_Amount_init_default                                                                      \
    }
#define penumbra_core_component_stake_v1_Undelegate_init_default                                                          \
    {                                                                                                                     \
        false, penumbra_core_keys_v1_IdentityKey_init_default, 0, false, penumbra_core_num_v1_Amount_init_default, false, \
            penumbra_core_num_v1_Amount_init_default, false, penumbra_core_component_sct_v1_Epoch_init_default            \
    }
#define penumbra_core_component_stake_v1_UndelegateClaim_init_default                              \
    {                                                                                              \
        false, penumbra_core_component_stake_v1_UndelegateClaimBody_init_default, { {NULL}, NULL } \
    }
#define penumbra_core_component_stake_v1_UndelegateClaimBody_init_default \
    {                                                                     \
        false, penumbra_core_keys_v1_IdentityKey_init_default, 0, false,  \
            penumbra_core_component_stake_v1_Penalty_init_default, false, \
            penumbra_core_asset_v1_BalanceCommitment_init_default, 0      \
    }
#define penumbra_core_component_stake_v1_UndelegateClaimPlan_init_default                                           \
    {                                                                                                               \
        false, penumbra_core_keys_v1_IdentityKey_init_default, 0, false,                                            \
            penumbra_core_component_stake_v1_Penalty_init_default, false, penumbra_core_num_v1_Amount_init_default, \
            {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0                                                       \
    }
#define penumbra_core_component_stake_v1_Penalty_init_default \
    {                                                         \
        { {NULL}, NULL }                                      \
    }
#define penumbra_core_component_stake_v1_StakeParameters_init_default \
    { 0, 0, 0, 0, 0, 0, 0, false, penumbra_core_num_v1_Amount_init_default, 0 }
#define penumbra_core_component_stake_v1_Validator_init_zero                                                                \
    {                                                                                                                       \
        false, penumbra_core_keys_v1_IdentityKey_init_zero, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, \
            {{NULL}, NULL}, 0, 0, false, penumbra_core_keys_v1_GovernanceKey_init_zero                                      \
    }
#define penumbra_core_component_stake_v1_FundingStream_init_zero                  \
    {                                                                             \
        0, { penumbra_core_component_stake_v1_FundingStream_ToAddress_init_zero } \
    }
#define penumbra_core_component_stake_v1_FundingStream_ToAddress_init_zero \
    { {{NULL}, NULL}, 0 }
#define penumbra_core_component_stake_v1_FundingStream_ToCommunityPool_init_zero \
    { 0 }
#define penumbra_core_component_stake_v1_ValidatorDefinition_init_zero                \
    {                                                                                 \
        false, penumbra_core_component_stake_v1_Validator_init_zero, { {NULL}, NULL } \
    }
#define penumbra_core_component_stake_v1_Delegate_init_zero                                                         \
    {                                                                                                               \
        false, penumbra_core_keys_v1_IdentityKey_init_zero, 0, false, penumbra_core_num_v1_Amount_init_zero, false, \
            penumbra_core_num_v1_Amount_init_zero                                                                   \
    }
#define penumbra_core_component_stake_v1_Undelegate_init_zero                                                       \
    {                                                                                                               \
        false, penumbra_core_keys_v1_IdentityKey_init_zero, 0, false, penumbra_core_num_v1_Amount_init_zero, false, \
            penumbra_core_num_v1_Amount_init_zero, false, penumbra_core_component_sct_v1_Epoch_init_zero            \
    }
#define penumbra_core_component_stake_v1_UndelegateClaim_init_zero                              \
    {                                                                                           \
        false, penumbra_core_component_stake_v1_UndelegateClaimBody_init_zero, { {NULL}, NULL } \
    }
#define penumbra_core_component_stake_v1_UndelegateClaimBody_init_zero                                                    \
    {                                                                                                                     \
        false, penumbra_core_keys_v1_IdentityKey_init_zero, 0, false, penumbra_core_component_stake_v1_Penalty_init_zero, \
            false, penumbra_core_asset_v1_BalanceCommitment_init_zero, 0                                                  \
    }
#define penumbra_core_component_stake_v1_UndelegateClaimPlan_init_zero                                                    \
    {                                                                                                                     \
        false, penumbra_core_keys_v1_IdentityKey_init_zero, 0, false, penumbra_core_component_stake_v1_Penalty_init_zero, \
            false, penumbra_core_num_v1_Amount_init_zero, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0               \
    }
#define penumbra_core_component_stake_v1_Penalty_init_zero \
    {                                                      \
        { {NULL}, NULL }                                   \
    }
#define penumbra_core_component_stake_v1_StakeParameters_init_zero \
    { 0, 0, 0, 0, 0, 0, 0, false, penumbra_core_num_v1_Amount_init_zero, 0 }

/* Field tags (for use in manual encoding/decoding) */
#define penumbra_core_component_stake_v1_Validator_identity_key_tag 1
#define penumbra_core_component_stake_v1_Validator_consensus_key_tag 2
#define penumbra_core_component_stake_v1_Validator_name_tag 3
#define penumbra_core_component_stake_v1_Validator_website_tag 4
#define penumbra_core_component_stake_v1_Validator_description_tag 5
#define penumbra_core_component_stake_v1_Validator_funding_streams_tag 6
#define penumbra_core_component_stake_v1_Validator_sequence_number_tag 7
#define penumbra_core_component_stake_v1_Validator_enabled_tag 8
#define penumbra_core_component_stake_v1_Validator_governance_key_tag 9
#define penumbra_core_component_stake_v1_FundingStream_ToAddress_address_tag 1
#define penumbra_core_component_stake_v1_FundingStream_ToAddress_rate_bps_tag 2
#define penumbra_core_component_stake_v1_FundingStream_ToCommunityPool_rate_bps_tag 2
#define penumbra_core_component_stake_v1_FundingStream_to_address_tag 1
#define penumbra_core_component_stake_v1_FundingStream_to_community_pool_tag 2
#define penumbra_core_component_stake_v1_ValidatorDefinition_validator_tag 1
#define penumbra_core_component_stake_v1_ValidatorDefinition_auth_sig_tag 2
#define penumbra_core_component_stake_v1_Delegate_validator_identity_tag 1
#define penumbra_core_component_stake_v1_Delegate_epoch_index_tag 2
#define penumbra_core_component_stake_v1_Delegate_unbonded_amount_tag 3
#define penumbra_core_component_stake_v1_Delegate_delegation_amount_tag 4
#define penumbra_core_component_stake_v1_Undelegate_validator_identity_tag 1
#define penumbra_core_component_stake_v1_Undelegate_start_epoch_index_tag 2
#define penumbra_core_component_stake_v1_Undelegate_unbonded_amount_tag 3
#define penumbra_core_component_stake_v1_Undelegate_delegation_amount_tag 4
#define penumbra_core_component_stake_v1_Undelegate_from_epoch_tag 5
#define penumbra_core_component_stake_v1_Penalty_inner_tag 1
#define penumbra_core_component_stake_v1_UndelegateClaimBody_validator_identity_tag 1
#define penumbra_core_component_stake_v1_UndelegateClaimBody_start_epoch_index_tag 2
#define penumbra_core_component_stake_v1_UndelegateClaimBody_penalty_tag 3
#define penumbra_core_component_stake_v1_UndelegateClaimBody_balance_commitment_tag 4
#define penumbra_core_component_stake_v1_UndelegateClaimBody_unbonding_start_height_tag 5
#define penumbra_core_component_stake_v1_UndelegateClaim_body_tag 1
#define penumbra_core_component_stake_v1_UndelegateClaim_proof_tag 2
#define penumbra_core_component_stake_v1_UndelegateClaimPlan_validator_identity_tag 1
#define penumbra_core_component_stake_v1_UndelegateClaimPlan_start_epoch_index_tag 2
#define penumbra_core_component_stake_v1_UndelegateClaimPlan_penalty_tag 4
#define penumbra_core_component_stake_v1_UndelegateClaimPlan_unbonding_amount_tag 5
#define penumbra_core_component_stake_v1_UndelegateClaimPlan_balance_blinding_tag 6
#define penumbra_core_component_stake_v1_UndelegateClaimPlan_proof_blinding_r_tag 7
#define penumbra_core_component_stake_v1_UndelegateClaimPlan_proof_blinding_s_tag 8
#define penumbra_core_component_stake_v1_UndelegateClaimPlan_unbonding_start_height_tag 9
#define penumbra_core_component_stake_v1_StakeParameters_unbonding_epochs_tag 1
#define penumbra_core_component_stake_v1_StakeParameters_active_validator_limit_tag 2
#define penumbra_core_component_stake_v1_StakeParameters_base_reward_rate_tag 3
#define penumbra_core_component_stake_v1_StakeParameters_slashing_penalty_misbehavior_tag 4
#define penumbra_core_component_stake_v1_StakeParameters_slashing_penalty_downtime_tag 5
#define penumbra_core_component_stake_v1_StakeParameters_signed_blocks_window_len_tag 6
#define penumbra_core_component_stake_v1_StakeParameters_missed_blocks_maximum_tag 7
#define penumbra_core_component_stake_v1_StakeParameters_min_validator_stake_tag 8
#define penumbra_core_component_stake_v1_StakeParameters_unbonding_delay_tag 9

/* Struct field encoding specification for nanopb */
#define penumbra_core_component_stake_v1_Validator_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, identity_key, 1)               \
    X(a, CALLBACK, SINGULAR, BYTES, consensus_key, 2)              \
    X(a, CALLBACK, SINGULAR, STRING, name, 3)                      \
    X(a, CALLBACK, SINGULAR, STRING, website, 4)                   \
    X(a, CALLBACK, SINGULAR, STRING, description, 5)               \
    X(a, CALLBACK, REPEATED, MESSAGE, funding_streams, 6)          \
    X(a, STATIC, SINGULAR, UINT32, sequence_number, 7)             \
    X(a, STATIC, SINGULAR, BOOL, enabled, 8)                       \
    X(a, STATIC, OPTIONAL, MESSAGE, governance_key, 9)
#define penumbra_core_component_stake_v1_Validator_CALLBACK pb_default_field_callback
#define penumbra_core_component_stake_v1_Validator_DEFAULT NULL
#define penumbra_core_component_stake_v1_Validator_identity_key_MSGTYPE penumbra_core_keys_v1_IdentityKey
#define penumbra_core_component_stake_v1_Validator_funding_streams_MSGTYPE penumbra_core_component_stake_v1_FundingStream
#define penumbra_core_component_stake_v1_Validator_governance_key_MSGTYPE penumbra_core_keys_v1_GovernanceKey

#define penumbra_core_component_stake_v1_FundingStream_FIELDLIST(X, a)             \
    X(a, STATIC, ONEOF, MESSAGE, (recipient, to_address, recipient.to_address), 1) \
    X(a, STATIC, ONEOF, MESSAGE, (recipient, to_community_pool, recipient.to_community_pool), 2)
#define penumbra_core_component_stake_v1_FundingStream_CALLBACK NULL
#define penumbra_core_component_stake_v1_FundingStream_DEFAULT NULL
#define penumbra_core_component_stake_v1_FundingStream_recipient_to_address_MSGTYPE \
    penumbra_core_component_stake_v1_FundingStream_ToAddress
#define penumbra_core_component_stake_v1_FundingStream_recipient_to_community_pool_MSGTYPE \
    penumbra_core_component_stake_v1_FundingStream_ToCommunityPool

#define penumbra_core_component_stake_v1_FundingStream_ToAddress_FIELDLIST(X, a) \
    X(a, CALLBACK, SINGULAR, STRING, address, 1)                                 \
    X(a, STATIC, SINGULAR, UINT32, rate_bps, 2)
#define penumbra_core_component_stake_v1_FundingStream_ToAddress_CALLBACK pb_default_field_callback
#define penumbra_core_component_stake_v1_FundingStream_ToAddress_DEFAULT NULL

#define penumbra_core_component_stake_v1_FundingStream_ToCommunityPool_FIELDLIST(X, a) \
    X(a, STATIC, SINGULAR, UINT32, rate_bps, 2)
#define penumbra_core_component_stake_v1_FundingStream_ToCommunityPool_CALLBACK NULL
#define penumbra_core_component_stake_v1_FundingStream_ToCommunityPool_DEFAULT NULL

#define penumbra_core_component_stake_v1_ValidatorDefinition_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, validator, 1)                            \
    X(a, CALLBACK, SINGULAR, BYTES, auth_sig, 2)
#define penumbra_core_component_stake_v1_ValidatorDefinition_CALLBACK pb_default_field_callback
#define penumbra_core_component_stake_v1_ValidatorDefinition_DEFAULT NULL
#define penumbra_core_component_stake_v1_ValidatorDefinition_validator_MSGTYPE penumbra_core_component_stake_v1_Validator

#define penumbra_core_component_stake_v1_Delegate_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, validator_identity, 1)        \
    X(a, STATIC, SINGULAR, UINT64, epoch_index, 2)                \
    X(a, STATIC, OPTIONAL, MESSAGE, unbonded_amount, 3)           \
    X(a, STATIC, OPTIONAL, MESSAGE, delegation_amount, 4)
#define penumbra_core_component_stake_v1_Delegate_CALLBACK NULL
#define penumbra_core_component_stake_v1_Delegate_DEFAULT NULL
#define penumbra_core_component_stake_v1_Delegate_validator_identity_MSGTYPE penumbra_core_keys_v1_IdentityKey
#define penumbra_core_component_stake_v1_Delegate_unbonded_amount_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_stake_v1_Delegate_delegation_amount_MSGTYPE penumbra_core_num_v1_Amount

#define penumbra_core_component_stake_v1_Undelegate_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, validator_identity, 1)          \
    X(a, STATIC, SINGULAR, UINT64, start_epoch_index, 2)            \
    X(a, STATIC, OPTIONAL, MESSAGE, unbonded_amount, 3)             \
    X(a, STATIC, OPTIONAL, MESSAGE, delegation_amount, 4)           \
    X(a, STATIC, OPTIONAL, MESSAGE, from_epoch, 5)
#define penumbra_core_component_stake_v1_Undelegate_CALLBACK NULL
#define penumbra_core_component_stake_v1_Undelegate_DEFAULT NULL
#define penumbra_core_component_stake_v1_Undelegate_validator_identity_MSGTYPE penumbra_core_keys_v1_IdentityKey
#define penumbra_core_component_stake_v1_Undelegate_unbonded_amount_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_stake_v1_Undelegate_delegation_amount_MSGTYPE penumbra_core_num_v1_Amount
#define penumbra_core_component_stake_v1_Undelegate_from_epoch_MSGTYPE penumbra_core_component_sct_v1_Epoch

#define penumbra_core_component_stake_v1_UndelegateClaim_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, body, 1)                             \
    X(a, CALLBACK, SINGULAR, BYTES, proof, 2)
#define penumbra_core_component_stake_v1_UndelegateClaim_CALLBACK pb_default_field_callback
#define penumbra_core_component_stake_v1_UndelegateClaim_DEFAULT NULL
#define penumbra_core_component_stake_v1_UndelegateClaim_body_MSGTYPE penumbra_core_component_stake_v1_UndelegateClaimBody

#define penumbra_core_component_stake_v1_UndelegateClaimBody_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, validator_identity, 1)                   \
    X(a, STATIC, SINGULAR, UINT64, start_epoch_index, 2)                     \
    X(a, STATIC, OPTIONAL, MESSAGE, penalty, 3)                              \
    X(a, STATIC, OPTIONAL, MESSAGE, balance_commitment, 4)                   \
    X(a, STATIC, SINGULAR, UINT64, unbonding_start_height, 5)
#define penumbra_core_component_stake_v1_UndelegateClaimBody_CALLBACK NULL
#define penumbra_core_component_stake_v1_UndelegateClaimBody_DEFAULT NULL
#define penumbra_core_component_stake_v1_UndelegateClaimBody_validator_identity_MSGTYPE penumbra_core_keys_v1_IdentityKey
#define penumbra_core_component_stake_v1_UndelegateClaimBody_penalty_MSGTYPE penumbra_core_component_stake_v1_Penalty
#define penumbra_core_component_stake_v1_UndelegateClaimBody_balance_commitment_MSGTYPE \
    penumbra_core_asset_v1_BalanceCommitment

#define penumbra_core_component_stake_v1_UndelegateClaimPlan_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, validator_identity, 1)                   \
    X(a, STATIC, SINGULAR, UINT64, start_epoch_index, 2)                     \
    X(a, STATIC, OPTIONAL, MESSAGE, penalty, 4)                              \
    X(a, STATIC, OPTIONAL, MESSAGE, unbonding_amount, 5)                     \
    X(a, CALLBACK, SINGULAR, BYTES, balance_blinding, 6)                     \
    X(a, CALLBACK, SINGULAR, BYTES, proof_blinding_r, 7)                     \
    X(a, CALLBACK, SINGULAR, BYTES, proof_blinding_s, 8)                     \
    X(a, STATIC, SINGULAR, UINT64, unbonding_start_height, 9)
#define penumbra_core_component_stake_v1_UndelegateClaimPlan_CALLBACK pb_default_field_callback
#define penumbra_core_component_stake_v1_UndelegateClaimPlan_DEFAULT NULL
#define penumbra_core_component_stake_v1_UndelegateClaimPlan_validator_identity_MSGTYPE penumbra_core_keys_v1_IdentityKey
#define penumbra_core_component_stake_v1_UndelegateClaimPlan_penalty_MSGTYPE penumbra_core_component_stake_v1_Penalty
#define penumbra_core_component_stake_v1_UndelegateClaimPlan_unbonding_amount_MSGTYPE penumbra_core_num_v1_Amount

#define penumbra_core_component_stake_v1_Penalty_FIELDLIST(X, a) X(a, CALLBACK, SINGULAR, BYTES, inner, 1)
#define penumbra_core_component_stake_v1_Penalty_CALLBACK pb_default_field_callback
#define penumbra_core_component_stake_v1_Penalty_DEFAULT NULL

#define penumbra_core_component_stake_v1_StakeParameters_FIELDLIST(X, a) \
    X(a, STATIC, SINGULAR, UINT64, unbonding_epochs, 1)                  \
    X(a, STATIC, SINGULAR, UINT64, active_validator_limit, 2)            \
    X(a, STATIC, SINGULAR, UINT64, base_reward_rate, 3)                  \
    X(a, STATIC, SINGULAR, UINT64, slashing_penalty_misbehavior, 4)      \
    X(a, STATIC, SINGULAR, UINT64, slashing_penalty_downtime, 5)         \
    X(a, STATIC, SINGULAR, UINT64, signed_blocks_window_len, 6)          \
    X(a, STATIC, SINGULAR, UINT64, missed_blocks_maximum, 7)             \
    X(a, STATIC, OPTIONAL, MESSAGE, min_validator_stake, 8)              \
    X(a, STATIC, SINGULAR, UINT64, unbonding_delay, 9)
#define penumbra_core_component_stake_v1_StakeParameters_CALLBACK NULL
#define penumbra_core_component_stake_v1_StakeParameters_DEFAULT NULL
#define penumbra_core_component_stake_v1_StakeParameters_min_validator_stake_MSGTYPE penumbra_core_num_v1_Amount

extern const pb_msgdesc_t penumbra_core_component_stake_v1_Validator_msg;
extern const pb_msgdesc_t penumbra_core_component_stake_v1_FundingStream_msg;
extern const pb_msgdesc_t penumbra_core_component_stake_v1_FundingStream_ToAddress_msg;
extern const pb_msgdesc_t penumbra_core_component_stake_v1_FundingStream_ToCommunityPool_msg;
extern const pb_msgdesc_t penumbra_core_component_stake_v1_ValidatorDefinition_msg;
extern const pb_msgdesc_t penumbra_core_component_stake_v1_Delegate_msg;
extern const pb_msgdesc_t penumbra_core_component_stake_v1_Undelegate_msg;
extern const pb_msgdesc_t penumbra_core_component_stake_v1_UndelegateClaim_msg;
extern const pb_msgdesc_t penumbra_core_component_stake_v1_UndelegateClaimBody_msg;
extern const pb_msgdesc_t penumbra_core_component_stake_v1_UndelegateClaimPlan_msg;
extern const pb_msgdesc_t penumbra_core_component_stake_v1_Penalty_msg;
extern const pb_msgdesc_t penumbra_core_component_stake_v1_StakeParameters_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define penumbra_core_component_stake_v1_Validator_fields &penumbra_core_component_stake_v1_Validator_msg
#define penumbra_core_component_stake_v1_FundingStream_fields &penumbra_core_component_stake_v1_FundingStream_msg
#define penumbra_core_component_stake_v1_FundingStream_ToAddress_fields \
    &penumbra_core_component_stake_v1_FundingStream_ToAddress_msg
#define penumbra_core_component_stake_v1_FundingStream_ToCommunityPool_fields \
    &penumbra_core_component_stake_v1_FundingStream_ToCommunityPool_msg
#define penumbra_core_component_stake_v1_ValidatorDefinition_fields &penumbra_core_component_stake_v1_ValidatorDefinition_msg
#define penumbra_core_component_stake_v1_Delegate_fields &penumbra_core_component_stake_v1_Delegate_msg
#define penumbra_core_component_stake_v1_Undelegate_fields &penumbra_core_component_stake_v1_Undelegate_msg
#define penumbra_core_component_stake_v1_UndelegateClaim_fields &penumbra_core_component_stake_v1_UndelegateClaim_msg
#define penumbra_core_component_stake_v1_UndelegateClaimBody_fields &penumbra_core_component_stake_v1_UndelegateClaimBody_msg
#define penumbra_core_component_stake_v1_UndelegateClaimPlan_fields &penumbra_core_component_stake_v1_UndelegateClaimPlan_msg
#define penumbra_core_component_stake_v1_Penalty_fields &penumbra_core_component_stake_v1_Penalty_msg
#define penumbra_core_component_stake_v1_StakeParameters_fields &penumbra_core_component_stake_v1_StakeParameters_msg

/* Maximum encoded size of messages (where known) */
/* penumbra_core_component_stake_v1_Validator_size depends on runtime parameters */
/* penumbra_core_component_stake_v1_FundingStream_size depends on runtime parameters */
/* penumbra_core_component_stake_v1_FundingStream_ToAddress_size depends on runtime parameters */
/* penumbra_core_component_stake_v1_ValidatorDefinition_size depends on runtime parameters */
/* penumbra_core_component_stake_v1_UndelegateClaim_size depends on runtime parameters */
/* penumbra_core_component_stake_v1_UndelegateClaimBody_size depends on runtime parameters */
/* penumbra_core_component_stake_v1_UndelegateClaimPlan_size depends on runtime parameters */
/* penumbra_core_component_stake_v1_Penalty_size depends on runtime parameters */
#define PENUMBRA_CORE_COMPONENT_STAKE_V1_PENUMBRA_CORE_COMPONENT_STAKE_V1_STAKE_PB_H_MAX_SIZE \
    penumbra_core_component_stake_v1_StakeParameters_size
#define penumbra_core_component_stake_v1_FundingStream_ToCommunityPool_size 6
#define penumbra_core_component_stake_v1_StakeParameters_size 112
#if defined(penumbra_core_keys_v1_IdentityKey_size)
#define penumbra_core_component_stake_v1_Delegate_size (65 + penumbra_core_keys_v1_IdentityKey_size)
#define penumbra_core_component_stake_v1_Undelegate_size (89 + penumbra_core_keys_v1_IdentityKey_size)
#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
