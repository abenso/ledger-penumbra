/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9 */

#ifndef PB_PENUMBRA_CRYPTO_TCT_V1_PENUMBRA_CRYPTO_TCT_V1_TCT_PB_H_INCLUDED
#define PB_PENUMBRA_CRYPTO_TCT_V1_PENUMBRA_CRYPTO_TCT_V1_TCT_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _penumbra_crypto_tct_v1_StateCommitment {
    pb_callback_t inner;
} penumbra_crypto_tct_v1_StateCommitment;

typedef struct _penumbra_crypto_tct_v1_MerkleRoot {
    pb_callback_t inner;
} penumbra_crypto_tct_v1_MerkleRoot;

/* An authentication path from a state commitment to the root of the state commitment tree. */
typedef struct _penumbra_crypto_tct_v1_StateCommitmentProof {
    bool has_note_commitment;
    penumbra_crypto_tct_v1_StateCommitment note_commitment;
    uint64_t position;
    pb_callback_t auth_path; /* always length 24 */
} penumbra_crypto_tct_v1_StateCommitmentProof;

/* A set of 3 sibling hashes in the auth path for some note commitment. */
typedef struct _penumbra_crypto_tct_v1_MerklePathChunk {
    pb_callback_t sibling_1;
    pb_callback_t sibling_2;
    pb_callback_t sibling_3;
} penumbra_crypto_tct_v1_MerklePathChunk;

#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define penumbra_crypto_tct_v1_StateCommitment_init_default \
    {                                                       \
        { {NULL}, NULL }                                    \
    }
#define penumbra_crypto_tct_v1_MerkleRoot_init_default \
    {                                                  \
        { {NULL}, NULL }                               \
    }
#define penumbra_crypto_tct_v1_StateCommitmentProof_init_default                        \
    {                                                                                   \
        false, penumbra_crypto_tct_v1_StateCommitment_init_default, 0, { {NULL}, NULL } \
    }
#define penumbra_crypto_tct_v1_MerklePathChunk_init_default \
    {                                                       \
        {{NULL}, NULL}, {{NULL}, NULL}, { {NULL}, NULL }    \
    }
#define penumbra_crypto_tct_v1_StateCommitment_init_zero \
    {                                                    \
        { {NULL}, NULL }                                 \
    }
#define penumbra_crypto_tct_v1_MerkleRoot_init_zero \
    {                                               \
        { {NULL}, NULL }                            \
    }
#define penumbra_crypto_tct_v1_StateCommitmentProof_init_zero                        \
    {                                                                                \
        false, penumbra_crypto_tct_v1_StateCommitment_init_zero, 0, { {NULL}, NULL } \
    }
#define penumbra_crypto_tct_v1_MerklePathChunk_init_zero \
    {                                                    \
        {{NULL}, NULL}, {{NULL}, NULL}, { {NULL}, NULL } \
    }

/* Field tags (for use in manual encoding/decoding) */
#define penumbra_crypto_tct_v1_StateCommitment_inner_tag 1
#define penumbra_crypto_tct_v1_MerkleRoot_inner_tag 1
#define penumbra_crypto_tct_v1_StateCommitmentProof_note_commitment_tag 1
#define penumbra_crypto_tct_v1_StateCommitmentProof_position_tag 2
#define penumbra_crypto_tct_v1_StateCommitmentProof_auth_path_tag 3
#define penumbra_crypto_tct_v1_MerklePathChunk_sibling_1_tag 1
#define penumbra_crypto_tct_v1_MerklePathChunk_sibling_2_tag 2
#define penumbra_crypto_tct_v1_MerklePathChunk_sibling_3_tag 3

/* Struct field encoding specification for nanopb */
#define penumbra_crypto_tct_v1_StateCommitment_FIELDLIST(X, a) X(a, CALLBACK, SINGULAR, BYTES, inner, 1)
#define penumbra_crypto_tct_v1_StateCommitment_CALLBACK pb_default_field_callback
#define penumbra_crypto_tct_v1_StateCommitment_DEFAULT NULL

#define penumbra_crypto_tct_v1_MerkleRoot_FIELDLIST(X, a) X(a, CALLBACK, SINGULAR, BYTES, inner, 1)
#define penumbra_crypto_tct_v1_MerkleRoot_CALLBACK pb_default_field_callback
#define penumbra_crypto_tct_v1_MerkleRoot_DEFAULT NULL

#define penumbra_crypto_tct_v1_StateCommitmentProof_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, MESSAGE, note_commitment, 1)             \
    X(a, STATIC, SINGULAR, UINT64, position, 2)                     \
    X(a, CALLBACK, REPEATED, MESSAGE, auth_path, 3)
#define penumbra_crypto_tct_v1_StateCommitmentProof_CALLBACK pb_default_field_callback
#define penumbra_crypto_tct_v1_StateCommitmentProof_DEFAULT NULL
#define penumbra_crypto_tct_v1_StateCommitmentProof_note_commitment_MSGTYPE penumbra_crypto_tct_v1_StateCommitment
#define penumbra_crypto_tct_v1_StateCommitmentProof_auth_path_MSGTYPE penumbra_crypto_tct_v1_MerklePathChunk

#define penumbra_crypto_tct_v1_MerklePathChunk_FIELDLIST(X, a) \
    X(a, CALLBACK, SINGULAR, BYTES, sibling_1, 1)              \
    X(a, CALLBACK, SINGULAR, BYTES, sibling_2, 2)              \
    X(a, CALLBACK, SINGULAR, BYTES, sibling_3, 3)
#define penumbra_crypto_tct_v1_MerklePathChunk_CALLBACK pb_default_field_callback
#define penumbra_crypto_tct_v1_MerklePathChunk_DEFAULT NULL

extern const pb_msgdesc_t penumbra_crypto_tct_v1_StateCommitment_msg;
extern const pb_msgdesc_t penumbra_crypto_tct_v1_MerkleRoot_msg;
extern const pb_msgdesc_t penumbra_crypto_tct_v1_StateCommitmentProof_msg;
extern const pb_msgdesc_t penumbra_crypto_tct_v1_MerklePathChunk_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define penumbra_crypto_tct_v1_StateCommitment_fields &penumbra_crypto_tct_v1_StateCommitment_msg
#define penumbra_crypto_tct_v1_MerkleRoot_fields &penumbra_crypto_tct_v1_MerkleRoot_msg
#define penumbra_crypto_tct_v1_StateCommitmentProof_fields &penumbra_crypto_tct_v1_StateCommitmentProof_msg
#define penumbra_crypto_tct_v1_MerklePathChunk_fields &penumbra_crypto_tct_v1_MerklePathChunk_msg

/* Maximum encoded size of messages (where known) */
/* penumbra_crypto_tct_v1_StateCommitment_size depends on runtime parameters */
/* penumbra_crypto_tct_v1_MerkleRoot_size depends on runtime parameters */
/* penumbra_crypto_tct_v1_StateCommitmentProof_size depends on runtime parameters */
/* penumbra_crypto_tct_v1_MerklePathChunk_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
